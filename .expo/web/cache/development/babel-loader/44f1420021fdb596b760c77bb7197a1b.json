{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/nikitabeloshapka/webStormProjects/ToDoApp_Firebase/App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport * as Font from 'expo-font';\nimport AppLoading from 'expo-app-loading';\nimport { TodoState } from \"./src/context/todo/TodoState\";\nimport { ScreenState } from \"./src/context/screen/ScreenState\";\nimport { MainLayout } from \"./src/MainLayout\";\n\nfunction loadApplication() {\n  return _regeneratorRuntime.async(function loadApplication$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Font.loadAsync({\n            'roboto-regular': require(\"./assets/fonts/Roboto-Regular.ttf\"),\n            'roboto-bold': require(\"./assets/fonts/Roboto-Bold.ttf\")\n          }));\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isReady = _useState2[0],\n      setIsReady = _useState2[1];\n\n  if (!isReady) {\n    return React.createElement(AppLoading, {\n      startAsync: loadApplication,\n      onError: function onError(err) {\n        return console.log(err);\n      },\n      onFinish: function onFinish() {\n        return setIsReady(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return React.createElement(ScreenState, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, React.createElement(TodoState, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, React.createElement(MainLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/nikitabeloshapka/webStormProjects/ToDoApp_Firebase/App.js"],"names":["React","useState","Font","AppLoading","TodoState","ScreenState","MainLayout","loadApplication","loadAsync","require","App","isReady","setIsReady","err","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AAEA,SAASC,SAAT;AACA,SAASC,WAAT;AACA,SAASC,UAAT;;AAEA,SAAeC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACQL,IAAI,CAACM,SAAL,CAAe;AACnB,8BAAkBC,OAAO,qCADN;AAEnB,2BAAeA,OAAO;AAFH,WAAf,CADR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAA8BT,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOU,OAAP;AAAA,MAAgBC,UAAhB;;AAEA,MAAI,CAACD,OAAL,EAAc;AACZ,WACE,oBAAC,UAAD;AACE,MAAA,UAAU,EAAEJ,eADd;AAEE,MAAA,OAAO,EAAE,iBAAAM,GAAG;AAAA,eAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,OAFd;AAGE,MAAA,QAAQ,EAAE;AAAA,eAAMD,UAAU,CAAC,IAAD,CAAhB;AAAA,OAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD;;AAED,SACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADJ;AAOD","sourcesContent":["import React, { useState } from 'react'\nimport * as Font from 'expo-font'\nimport AppLoading from 'expo-app-loading'\n\nimport { TodoState } from './src/context/todo/TodoState'\nimport { ScreenState } from './src/context/screen/ScreenState'\nimport { MainLayout } from './src/MainLayout'\n\nasync function loadApplication() {\n  await Font.loadAsync({\n    'roboto-regular': require('./assets/fonts/Roboto-Regular.ttf'),\n    'roboto-bold': require('./assets/fonts/Roboto-Bold.ttf')\n  })\n}\n\nexport default function App() {\n  const [isReady, setIsReady] = useState(false)\n\n  if (!isReady) {\n    return (\n      <AppLoading\n        startAsync={loadApplication}\n        onError={err => console.log(err)}\n        onFinish={() => setIsReady(true)}\n      />\n    )\n  }\n\n  return (\n      <ScreenState>\n        <TodoState>\n          <MainLayout />\n        </TodoState>\n      </ScreenState>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}